camera:

if (glfwGetKey(window, GLFW_KEY_P) == GLFW_PRESS)
{
    glUniformMatrix4fv(projectionLoc, 1, GL_FALSE, glm::value_ptr(projectionP));
}
if (glfwGetKey(window, GLFW_KEY_I) == GLFW_PRESS)
{
    glUniformMatrix4fv(projectionLoc, 1, GL_FALSE, glm::value_ptr(projectionO));
}
if (glfwGetKey(window, GLFW_KEY_G) == GLFW_PRESS)
{
    view = glm::rotate(view, glm::radians(1.0f), glm::vec3(0.0f, 1.0f, 0.0f));
    glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
}

// Rotate the camera right (D key)
if (glfwGetKey(window, GLFW_KEY_J) == GLFW_PRESS)
{
    view = glm::rotate(view, glm::radians(-1.0f), glm::vec3(0.0f, 1.0f, 0.0f));
    glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
}

// Rotate the camera up (W key)
if (glfwGetKey(window, GLFW_KEY_Y) == GLFW_PRESS)
{
    view = glm::rotate(view, glm::radians(1.0f), glm::vec3(1.0f, 0.0f, 0.0f));
    glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
}

// Rotate the camera down (S key)
if (glfwGetKey(window, GLFW_KEY_H) == GLFW_PRESS)
{
    view = glm::rotate(view, glm::radians(-1.0f), glm::vec3(1.0f, 0.0f, 0.0f));
    glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
}
if (glfwGetKey(window, GLFW_KEY_Z) == GLFW_PRESS)
{
    glm::vec3 forward = glm::normalize(glm::vec3(view[2])); // Extract the forward vector from the view matrix
    view = glm::translate(view, 0.01f * forward); // Move along the forward vector
    glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
}
if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
{
    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
}
if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
{
    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
}

// Move the camera backward (S key)
if (glfwGetKey(window, GLFW_KEY_X) == GLFW_PRESS)
{
    glm::vec3 backward = -glm::normalize(glm::vec3(view[2])); // Extract the backward vector from the view matrix
    view = glm::translate(view, 0.01f * backward); // Move along the backward vector
    glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
}
if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
    glfwSetWindowShouldClose(window, GL_TRUE);



















        if (glfwGetKey(window, GLFW_KEY_P) == GLFW_PRESS)
        {
            glUniformMatrix4fv(projectionLoc, 1, GL_FALSE, glm::value_ptr(projectionP));
        }
        if (glfwGetKey(window, GLFW_KEY_I) == GLFW_PRESS)
        {
            glUniformMatrix4fv(projectionLoc, 1, GL_FALSE, glm::value_ptr(projectionO));
        }
        if (glfwGetKey(window, GLFW_KEY_G) == GLFW_PRESS)
        {
            view = glm::rotate(view, glm::radians(1.0f), glm::vec3(0.0f, 1.0f, 0.0f));
            glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
        }

        // Rotate the camera right (D key)
        if (glfwGetKey(window, GLFW_KEY_J) == GLFW_PRESS)
        {
            view = glm::rotate(view, glm::radians(-1.0f), glm::vec3(0.0f, 1.0f, 0.0f));
            glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
        }

        // Rotate the camera up (W key)
        if (glfwGetKey(window, GLFW_KEY_Y) == GLFW_PRESS)
        {
            view = glm::rotate(view, glm::radians(1.0f), glm::vec3(1.0f, 0.0f, 0.0f));
            glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
        }

        // Rotate the camera down (S key)
        if (glfwGetKey(window, GLFW_KEY_H) == GLFW_PRESS)
        {
            view = glm::rotate(view, glm::radians(-1.0f), glm::vec3(1.0f, 0.0f, 0.0f));
            glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
        }
        if (glfwGetKey(window, GLFW_KEY_Z) == GLFW_PRESS)
        {
            glm::vec3 forward = glm::normalize(glm::vec3(view[2])); // Extract the forward vector from the view matrix
            view = glm::translate(view, 0.01f * forward); // Move along the forward vector
            glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
        }
        // Move the camera backward (S key)
        if (glfwGetKey(window, GLFW_KEY_X) == GLFW_PRESS)
        {
            glm::vec3 backward = -glm::normalize(glm::vec3(view[2])); // Extract the backward vector from the view matrix
            view = glm::translate(view, 0.01f * backward); // Move along the backward vector
            glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
        }




glUseProgram(basicShader);
                glBindVertexArray(VAO[4]);

                float clockLineVertices[] = {
                    clockCenterX, clockCenterY, 1.0f, 0.0f, 0.0f, // Center of the clock
                    clockCenterX + (clockRadius * cos(-glfwGetTime())) / aspectRatio, clockCenterY + clockRadius * sin(-glfwGetTime()), 1.0f, 0.0f, 0.0f // End point of the clock line
                };

                glBindBuffer(GL_ARRAY_BUFFER, VBO[4]);
                glBufferData(GL_ARRAY_BUFFER, sizeof(clockLineVertices), clockLineVertices, GL_STATIC_DRAW);
                glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
                glEnableVertexAttribArray(0);
                glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(2 * sizeof(float)));
                glEnableVertexAttribArray(1);

                glEnable(GL_LINE_WIDTH);
                glLineWidth(5.0f);
                glDrawArrays(GL_LINES, 0, 2);
                glDisable(GL_LINE_WIDTH);







